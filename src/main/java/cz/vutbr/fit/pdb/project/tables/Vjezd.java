package cz.vutbr.fit.pdb.project.tables;
// Generated Dec 10, 2017 4:55:13 PM by Hibernate Tools 4.3.5.Final

import java.io.Serializable;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import org.hibernate.annotations.Type;
import org.hibernate.annotations.TypeDef;
import org.hibernate.annotations.TypeDefs;

import cz.vutbr.fit.pdb.project.model.TableBase;
import cz.vutbr.fit.pdb.project.tables.entities.JGeometryType;
import oracle.spatial.geometry.JGeometry;

/**
 * Vjezd generated by hbm2java
 */
@Entity
@Table(name = "VJEZD")
public class Vjezd extends TableBase implements java.io.Serializable {

	@Id
	@Column(name = "ID_VJEZD", unique = true, nullable = false, precision = 22, scale = 0)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "vjezd_seq")
	@SequenceGenerator(name = "vjezd_seq", sequenceName = "vjezd_seq", allocationSize = 1, initialValue = 1)
	private Long idVjezd;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ZONA_ID", nullable = false)
	private Zona zona;

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "vjezd")
	private Set<Pobyt> pobyts = new HashSet<Pobyt>(0);

	public Vjezd() {
	}

	public Vjezd(Long idVjezd) {
		this.idVjezd = idVjezd;
	}

	public Vjezd(Long idVjezd, Zona zona, Set<Pobyt> pobyts) {
		this.idVjezd = idVjezd;
		this.zona = zona;
		this.pobyts = pobyts;
	}

	public Long getIdVjezd() {
		return this.idVjezd;
	}

	public void setIdVjezd(Long idVjezd) {
		this.idVjezd = idVjezd;
	}

	public JGeometry getJGeometry() {
		return this.zona.getJGeoZony();
	}

	public Zona getZona() {
		return this.zona;
	}

	public void setZona(Zona zona) {
		this.zona = zona;
	}

	public Set<Pobyt> getPobyts() {
		return this.pobyts;
	}

	public void setPobyts(Set<Pobyt> pobyts) {
		this.pobyts = pobyts;
	}

	public static Vjezd insert(Zona zona) {
		Vjezd Vjezd = new Vjezd();
		try {
			entityManager.getTransaction().begin();
			Vjezd.setZona(zona);
			Vjezd = entityManager.merge(Vjezd);
			entityManager.getTransaction().commit();
		} catch (Exception e) {
			entityManager.getTransaction().rollback();
			e.printStackTrace();
		}
		return Vjezd;
	}
	
	public static Vjezd getByZona(Zona zona) {
		try {
			entityManager.getTransaction().begin();
			@SuppressWarnings("unchecked")
			Vjezd parkovaciMistos = (Vjezd) entityManager
					.createQuery("from Vjezd where ZONA_ID = :id").setParameter("id", zona.getIdZony()).getSingleResult();
			entityManager.getTransaction().commit();
			return parkovaciMistos;
		} catch (Exception e) {
			entityManager.getTransaction().rollback();
		//	e.printStackTrace();
		}
		return null;
	}

	public static List<Vjezd> list() {
		try {
			entityManager.getTransaction().begin();
			@SuppressWarnings("unchecked")
			List<Vjezd> Vjezds = entityManager.createQuery("from Vjezd").getResultList();
			for (Iterator<Vjezd> iterator = Vjezds.iterator(); iterator.hasNext();) {
				Vjezd Vjezd = (Vjezd) iterator.next();
				System.out.println(Vjezd.getIdVjezd());
				// System.out.println(Vjezd.getGeoVjezd().getJGeometry().toGeoJson());
			}
			entityManager.getTransaction().commit();
			return Vjezds;
		} catch (Exception e) {
			entityManager.getTransaction().rollback();
			e.printStackTrace();
		}
		return Collections.emptyList();
	}

	public static Vjezd update(Long VjezdId, Zona zona) {
		log.info("Vjezd.update");
		try {
			entityManager.getTransaction().begin();
			Vjezd Vjezd = (Vjezd) entityManager.find(Vjezd.class, VjezdId);
			if (Vjezd == null) {
				return null;
			}
			Vjezd.setZona(zona);
			entityManager.getTransaction().commit();
			log.info(Vjezd.getIdVjezd());
			// log.info(Vjezd.getGeoVjezd());
			return Vjezd;
		} catch (Exception e) {
			entityManager.getTransaction().rollback();
			e.printStackTrace();
		}
		return null;
	}

	public static boolean delete(Long VjezdId) {
		try {
			entityManager.getTransaction().begin();
			Vjezd Vjezd = (Vjezd) entityManager.find(Vjezd.class, VjezdId);
			entityManager.remove(Vjezd);
			entityManager.getTransaction().commit();
		} catch (Exception e) {
			entityManager.getTransaction().rollback();
			e.printStackTrace();
			return false;
		}
		return true;
	}

}
