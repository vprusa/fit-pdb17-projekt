package cz.vutbr.fit.pdb.project.tables;
// Generated Dec 10, 2017 4:55:13 PM by Hibernate Tools 4.3.5.Final

import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import cz.vutbr.fit.pdb.project.model.TableBase;
import cz.vutbr.fit.pdb.project.tables.entities.JGeometryType;
import oracle.spatial.geometry.JGeometry;

/**
 * Pobyt generated by hbm2java
 */
@Entity
@Table(name = "POBYT")
public class Pobyt extends TableBase implements java.io.Serializable {

	@Id
	@Column(name = "ID_POBYT", unique = true, nullable = false, precision = 22, scale = 0)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "pobyt_seq")
	@SequenceGenerator(name = "pobyt_seq", sequenceName = "pobyt_seq", allocationSize = 1, initialValue = 1)
	private Long idPobyt;
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "VJEZD_ID")
	private Vjezd vjezd;
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "AUTO_ID")
	private Vozidlo vozidlo;
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "VYJEZD_ID")
	private Vyjezd vyjezd;
	@Temporal(TemporalType.DATE)
	@Column(name = "VJEZD", length = 7)
	private Date vjezd_1;
	@Temporal(TemporalType.DATE)
	@Column(name = "VYJEZD", length = 7)
	private Date vyjezd_1;
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "pobyt")
	private Set<Parkovani> parkovanis = new HashSet<Parkovani>(0);

	public Pobyt() {
	}

	public Pobyt(Long idPobyt) {
		this.idPobyt = idPobyt;
	}

	public Pobyt(Long idPobyt, Vjezd vjezd, Vozidlo vozidlo, Vyjezd vyjezd, Date vjezd_1, Date vyjezd_1,
			Set<Parkovani> parkovanis) {
		this.idPobyt = idPobyt;
		this.vjezd = vjezd;
		this.vozidlo = vozidlo;
		this.vyjezd = vyjezd;
		this.vjezd_1 = vjezd_1;
		this.vyjezd_1 = vyjezd_1;
		this.parkovanis = parkovanis;
	}

	public Long getIdPobyt() {
		return this.idPobyt;
	}

	public void setIdPobyt(Long idPobyt) {
		this.idPobyt = idPobyt;
	}

	public Vjezd getVjezd() {
		return this.vjezd;
	}

	public void setVjezd(Vjezd vjezd) {
		this.vjezd = vjezd;
	}

	public Vozidlo getVozidlo() {
		return this.vozidlo;
	}

	public void setVozidlo(Vozidlo vozidlo) {
		this.vozidlo = vozidlo;
	}

	public Vyjezd getVyjezd() {
		return this.vyjezd;
	}

	public void setVyjezd(Vyjezd vyjezd) {
		this.vyjezd = vyjezd;
	}

	public Date getVjezd_1() {
		return this.vjezd_1;
	}

	public void setVjezd_1(Date vjezd_1) {
		this.vjezd_1 = vjezd_1;
	}

	public Date getVyjezd_1() {
		return this.vyjezd_1;
	}

	public void setVyjezd_1(Date vyjezd_1) {
		this.vyjezd_1 = vyjezd_1;
	}

	public Set<Parkovani> getParkovanis() {
		return this.parkovanis;
	}

	public void setParkovanis(Set<Parkovani> parkovanis) {
		this.parkovanis = parkovanis;
	}

	public static Pobyt insert(Vjezd vjezd, Vozidlo vozidlo, Vyjezd vyjezd, Date vjezd_1, Date vyjezd_1,
			Set<Parkovani> parkovanis) {

		Pobyt Pobyt = new Pobyt();
		try {
			entityManager.getTransaction().begin();
			Pobyt.setVjezd(vjezd);
			Pobyt.setVozidlo(vozidlo);
			Pobyt.setVyjezd(vyjezd);
			Pobyt.setVjezd_1(vjezd_1);
			Pobyt.setVyjezd_1(vyjezd_1);
			Pobyt.setParkovanis(parkovanis);
			log.info("\n\n\nSave");
			Pobyt = entityManager.merge(Pobyt);
			entityManager.getTransaction().commit();
		} catch (Exception e) {
			entityManager.getTransaction().rollback();
			e.printStackTrace();
		}
		return Pobyt;
	}

	public static List<Pobyt> list() {
		try {
			entityManager.getTransaction().begin();
			@SuppressWarnings("unchecked")
			List<Pobyt> Pobyts = entityManager.createQuery("from Pobyt").getResultList();
			for (Iterator<Pobyt> iterator = Pobyts.iterator(); iterator.hasNext();) {
				Pobyt Pobyt = (Pobyt) iterator.next();
				System.out.println(Pobyt.getIdPobyt());
				System.out.println(Pobyt.getVozidlo().getSpz());
				// System.out.println(Pobyt.getGeoPobyt().getJGeometry().toGeoJson());
			}
			entityManager.getTransaction().commit();
			return Pobyts;
		} catch (Exception e) {
			entityManager.getTransaction().rollback();
			e.printStackTrace();
		}
		return Collections.emptyList();
	}

	public static Pobyt update(Long PobytId, Vjezd vjezd, Vozidlo vozidlo, Vyjezd vyjezd, Date vjezd_1, Date vyjezd_1,
			Set<Parkovani> parkovanis) {
		log.info("Pobyt.update");
		try {
			entityManager.getTransaction().begin();
			Pobyt Pobyt = (Pobyt) entityManager.find(Pobyt.class, PobytId);
			if (Pobyt == null) {
				return null;
			}
			Pobyt.setVjezd(vjezd);
			Pobyt.setVozidlo(vozidlo);
			Pobyt.setVyjezd(vyjezd);
			Pobyt.setVjezd_1(vjezd_1);
			Pobyt.setVyjezd_1(vyjezd_1);
			Pobyt.setParkovanis(parkovanis);
			entityManager.getTransaction().commit();
			log.info(Pobyt.getIdPobyt());
			return Pobyt;
		} catch (Exception e) {
			entityManager.getTransaction().rollback();
			e.printStackTrace();
		}
		return null;
	}

	public static boolean delete(Long PobytId) {
		try {
			entityManager.getTransaction().begin();
			Pobyt Pobyt = (Pobyt) entityManager.find(Pobyt.class, PobytId);
			entityManager.remove(Pobyt);
			entityManager.getTransaction().commit();
		} catch (Exception e) {
			entityManager.getTransaction().rollback();
			e.printStackTrace();
			return false;
		}
		return true;
	}

}
