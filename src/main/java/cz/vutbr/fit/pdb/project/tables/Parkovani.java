package cz.vutbr.fit.pdb.project.tables;
// Generated Dec 10, 2017 4:55:13 PM by Hibernate Tools 4.3.5.Final

import java.util.Collections;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import cz.vutbr.fit.pdb.project.model.TableBase;
import cz.vutbr.fit.pdb.project.tables.entities.JGeometryType;
import oracle.spatial.geometry.JGeometry;

/**
 * Parkovani generated by hbm2java
 */
@Entity
@Table(name = "PARKOVANI")
public class Parkovani extends TableBase implements java.io.Serializable {

	@Id
	@Column(name = "ID_PARKOVANI", unique = true, nullable = false, precision = 22, scale = 0)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "parkovani_seq")
	@SequenceGenerator(name = "parkovani_seq", sequenceName = "parkovani_seq", allocationSize = 1, initialValue = 1)
	private Long idParkovani;
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "MISTO_ID")
	private ParkovaciMisto parkovaciMisto;
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "POBYT_ID")
	private Pobyt pobyt;
	@Temporal(TemporalType.DATE)
	@Column(name = "ZACATEK", length = 7)
	private Date zacatek;

	@Temporal(TemporalType.DATE)
	@Column(name = "KONEC", length = 7)
	private Date konec;

	public Parkovani() {
	}

	public Parkovani(Long idParkovani) {
		this.idParkovani = idParkovani;
	}

	public Parkovani(Long idParkovani, ParkovaciMisto parkovaciMisto, Pobyt pobyt, Date zacatek, Date konec) {
		this.idParkovani = idParkovani;
		this.parkovaciMisto = parkovaciMisto;
		this.pobyt = pobyt;
		this.zacatek = zacatek;
		this.konec = konec;
	}

	public Long getIdParkovani() {
		return this.idParkovani;
	}

	public void setIdParkovani(Long idParkovani) {
		this.idParkovani = idParkovani;
	}

	public ParkovaciMisto getParkovaciMisto() {
		return this.parkovaciMisto;
	}

	public void setParkovaciMisto(ParkovaciMisto parkovaciMisto) {
		this.parkovaciMisto = parkovaciMisto;
	}

	public Pobyt getPobyt() {
		return this.pobyt;
	}

	public void setPobyt(Pobyt pobyt) {
		this.pobyt = pobyt;
	}

	public Date getZacatek() {
		return this.zacatek;
	}

	public void setZacatek(Date zacatek) {
		this.zacatek = zacatek;
	}

	public Date getKonec() {
		return this.konec;
	}

	public void setKonec(Date konec) {
		this.konec = konec;
	}

	public static Parkovani insert(ParkovaciMisto parkovaciMisto, Pobyt pobyt, Date zacatek, Date konec) {

		Parkovani Parkovani = new Parkovani();
		try {
			entityManager.getTransaction().begin();
			Parkovani.setParkovaciMisto(parkovaciMisto);
			Parkovani.setPobyt(pobyt);
			Parkovani.setZacatek(zacatek);
			Parkovani.setKonec(konec);
			Parkovani = entityManager.merge(Parkovani);
			entityManager.getTransaction().commit();
		} catch (Exception e) {
			entityManager.getTransaction().rollback();
			e.printStackTrace();
		}
		return Parkovani;
	}

	public static List<Parkovani> list() {
		try {
			entityManager.getTransaction().begin();
			@SuppressWarnings("unchecked")
			List<Parkovani> Parkovanis = entityManager.createQuery("from Parkovani").getResultList();
			for (Iterator<Parkovani> iterator = Parkovanis.iterator(); iterator.hasNext();) {
				Parkovani Parkovani = (Parkovani) iterator.next();
				System.out.println(Parkovani.getIdParkovani());
				// System.out.println(Parkovani.getGeoParkovani().getJGeometry().toGeoJson());
			}
			entityManager.getTransaction().commit();
			return Parkovanis;
		} catch (Exception e) {
			entityManager.getTransaction().rollback();
			e.printStackTrace();
		}
		return Collections.emptyList();
	}

	public static Parkovani update(Long ParkovaniId, ParkovaciMisto parkovaciMisto, Pobyt pobyt, Date zacatek,
			Date konec) {
		log.info("Parkovani.update");
		try {
			entityManager.getTransaction().begin();
			Parkovani Parkovani = (Parkovani) entityManager.find(Parkovani.class, ParkovaniId);
			if (Parkovani == null) {
				return null;
			}
			Parkovani.setParkovaciMisto(parkovaciMisto);
			Parkovani.setPobyt(pobyt);
			Parkovani.setZacatek(zacatek);
			Parkovani.setKonec(konec);
			entityManager.getTransaction().commit();
			log.info(Parkovani.getIdParkovani());
			// log.info(Parkovani.getGeoParkovani());
			return Parkovani;
		} catch (Exception e) {
			entityManager.getTransaction().rollback();
			e.printStackTrace();
		}
		return null;
	}

	public static boolean delete(Long ParkovaniId) {
		try {
			entityManager.getTransaction().begin();
			Parkovani Parkovani = (Parkovani) entityManager.find(Parkovani.class, ParkovaniId);
			entityManager.remove(Parkovani);
			entityManager.getTransaction().commit();
		} catch (Exception e) {
			entityManager.getTransaction().rollback();
			e.printStackTrace();
			return false;
		}
		return true;
	}

}
