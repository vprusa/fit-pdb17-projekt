package cz.vutbr.fit.pdb.project.tables;
// Generated Nov 28, 2017 5:54:05 PM by Hibernate Tools 4.3.5.Final

import java.util.Collections;
import java.util.Iterator;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Persistence;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import cz.vutbr.fit.pdb.project.model.TableBase;

/**
 * Zona generated by hbm2java
 */
@Entity
@Table(name = "ZONA")
public class Zona extends TableBase implements java.io.Serializable {

	@Id
	@Column(name = "ID_ZONY")
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "zona_seq")
	@SequenceGenerator(name = "zona_seq", sequenceName = "zona_seq", allocationSize = 1, initialValue = 1)
	private Long idZony = (long) 0;
	@Column(name = "NAZEV_ZONY")
	private String nazevZony = "";

	public Zona() {
	}

	public Zona(Long idZony) {
		this.idZony = idZony;
	}

	public Zona(Long idZony, String nazevZony) {
		this.idZony = idZony;
		this.nazevZony = nazevZony;
	}

	public Long getIdZony() {
		return this.idZony;
	}

	public void setIdZony(Long idZony) {
		this.idZony = idZony;
	}

	@Column(name = "NAZEV_ZONY", length = 50)
	public String getNazevZony() {
		return this.nazevZony;
	}

	public void setNazevZony(String nazevZony) {
		this.nazevZony = nazevZony;
	}

	public static Zona save(String ZonaName) {
		Zona zona = new Zona();
		try {
			entityManager.getTransaction().begin();
			zona.setNazevZony(ZonaName);
			zona = entityManager.merge(zona);
			entityManager.getTransaction().commit();
		} catch (Exception e) {
			entityManager.getTransaction().rollback();
			e.printStackTrace();
		}
		return zona;
	}

	public static List<Zona> list() {
		try {
			entityManager.getTransaction().begin();
			@SuppressWarnings("unchecked")
			List<Zona> Zonas = entityManager.createQuery("from Zona").getResultList();
			for (Iterator<Zona> iterator = Zonas.iterator(); iterator.hasNext();) {
				Zona Zona = (Zona) iterator.next();
				System.out.println(Zona.getNazevZony());
			}
			entityManager.getTransaction().commit();
			return Zonas;
		} catch (Exception e) {
			entityManager.getTransaction().rollback();
			e.printStackTrace();
		}
		return Collections.emptyList();
	}

	public static Zona update(Long ZonaId, String ZonaName) {
		log.info("Zona.update");
		try {
			entityManager.getTransaction().begin();
			Zona zona = (Zona) entityManager.find(Zona.class, ZonaId);
			if (zona == null) {
				return null;
			}
			zona.setNazevZony(ZonaName);
			entityManager.getTransaction().commit();
			log.info("entityManager.getTransaction().commit();");
			log.info(zona.getNazevZony());
			// log.info(zona.getIdZony());
			return zona;
		} catch (Exception e) {
			entityManager.getTransaction().rollback();
			e.printStackTrace();
		}
		return null;
	}

	public static boolean delete(Long ZonaId) {
		try {
			entityManager.getTransaction().begin();
			Zona Zona = (Zona) entityManager.find(Zona.class, ZonaId);
			entityManager.remove(Zona);
			entityManager.getTransaction().commit();
		} catch (Exception e) {
			entityManager.getTransaction().rollback();
			e.printStackTrace();
			return false;
		}
		return true;
	}

}
