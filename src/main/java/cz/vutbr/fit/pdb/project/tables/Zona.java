package cz.vutbr.fit.pdb.project.tables;
// Generated Nov 28, 2017 5:54:05 PM by Hibernate Tools 4.3.5.Final

import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Persistence;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import org.hibernate.annotations.Type;
import org.hibernate.annotations.TypeDef;
import org.hibernate.annotations.TypeDefs;

import cz.vutbr.fit.pdb.project.model.TableBase;
import cz.vutbr.fit.pdb.project.tables.entities.JGeometryType;
import oracle.spatial.geometry.JGeometry;

/**
 * Zona generated by hbm2java
 */
@Entity
@Table(name = "ZONA")
public class Zona extends TableBase implements java.io.Serializable {

	@Id
	@Column(name = "ID_ZONY")
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "zona_seq")
	@SequenceGenerator(name = "zona_seq", sequenceName = "zona_seq", allocationSize = 1, initialValue = 1)
	private Long idZony = (long) 0;
	@Column(name = "NAZEV_ZONY")
	private String nazevZony = "";

	@Column(name = "GEO_ZONY")
	@Type(type = "JGeometryType")
	private JGeometryType geoZony;

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "zona")
	private Set<Vyjezd> vyjezds = new HashSet<Vyjezd>(0);
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "zona")
	private Set<Vjezd> vjezds = new HashSet<Vjezd>(0);
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "zona")
	private Set<ParkovaciMisto> parkovaciMistos = new HashSet<ParkovaciMisto>(0);

	public Zona() {
	}

	public Zona(Long idZony) {
		this.idZony = idZony;
	}

	public Zona(Long idZony, String nazevZony, JGeometry geoZony, Set<Vyjezd> vyjezds, Set<Vjezd> vjezds,
			Set<ParkovaciMisto> parkovaciMistos) {
		this.idZony = idZony;
		this.nazevZony = nazevZony;
		this.geoZony = new JGeometryType(geoZony);
		this.vyjezds = vyjezds;
		this.vjezds = vjezds;
		this.parkovaciMistos = parkovaciMistos;
	}

	public Set<Vyjezd> getVyjezds() {
		return this.vyjezds;
	}

	public void setVyjezds(Set<Vyjezd> vyjezds) {
		this.vyjezds = vyjezds;
	}

	public Set<Vjezd> getVjezds() {
		return this.vjezds;
	}

	public void setVjezds(Set<Vjezd> vjezds) {
		this.vjezds = vjezds;
	}

	public Set<ParkovaciMisto> getParkovaciMistos() {
		return this.parkovaciMistos;
	}

	public void setParkovaciMistos(Set<ParkovaciMisto> parkovaciMistos) {
		this.parkovaciMistos = parkovaciMistos;
	}

	public Long getIdZony() {
		return this.idZony;
	}

	public void setIdZony(Long idZony) {
		this.idZony = idZony;
	}

	@Column(name = "NAZEV_ZONY", length = 50)
	public String getNazevZony() {
		return this.nazevZony;
	}

	public void setNazevZony(String nazevZony) {
		this.nazevZony = nazevZony;
	}

	public JGeometryType getGeoZony() {
		return this.geoZony;
	}

	public JGeometry getJGeoZony() {
		return (this.geoZony == null ? null : this.geoZony.getJGeometry());
	}

	public void setGeoZony(JGeometryType geoZony) {
		this.geoZony = geoZony;
	}

	public static Zona insert(String ZonaName, JGeometry geoZony) {
		Zona zona = new Zona();
		try {
			entityManager.getTransaction().begin();
			zona.setNazevZony(ZonaName);
			zona.setGeoZony(new JGeometryType(geoZony));
			log.info("\n\n\nSave");
			zona = entityManager.merge(zona);
			entityManager.getTransaction().commit();
		} catch (Exception e) {
			entityManager.getTransaction().rollback();
			e.printStackTrace();
		}
		return zona;
	}

	public static List<Zona> list() {
		try {
			entityManager.getTransaction().begin();
			@SuppressWarnings("unchecked")
			List<Zona> Zonas = entityManager.createQuery("from Zona").getResultList();
			for (Iterator<Zona> iterator = Zonas.iterator(); iterator.hasNext();) {
				Zona Zona = (Zona) iterator.next();
				System.out.println(Zona.getNazevZony());
				System.out.println(Zona.getGeoZony().getJGeometry().toGeoJson());
			}
			entityManager.getTransaction().commit();
			return Zonas;
		} catch (Exception e) {
			entityManager.getTransaction().rollback();
			e.printStackTrace();
		}
		return Collections.emptyList();
	}

	public static Zona selectById(Long id) {
		try {
			entityManager.getTransaction().begin();
			@SuppressWarnings("unchecked")
			Zona Zona = (Zona) entityManager.createQuery("from Zona where ID_ZONY=:id").setParameter("id", id)
					.getSingleResult();
			entityManager.getTransaction().commit();
			return Zona;
		} catch (Exception e) {
			entityManager.getTransaction().rollback();
			e.printStackTrace();
		}
		return null;
	}

	public static Zona update(Long ZonaId, String ZonaName, JGeometry geoZony) {
		log.info("Zona.update");
		try {
			entityManager.getTransaction().begin();
			Zona zona = (Zona) entityManager.find(Zona.class, ZonaId);
			if (zona == null) {
				return null;
			}
			zona.setNazevZony(ZonaName);
			zona.setGeoZony(new JGeometryType(geoZony));
			entityManager.getTransaction().commit();
			log.info("entityManager.getTransaction().commit();");
			log.info(zona.getNazevZony());
			// log.info(zona.getIdZony());
			return zona;
		} catch (Exception e) {
			entityManager.getTransaction().rollback();
			e.printStackTrace();
		}
		return null;
	}

	public static boolean delete(Long ZonaId) {
		try {
			entityManager.getTransaction().begin();
			Zona Zona = (Zona) entityManager.find(Zona.class, ZonaId);
			entityManager.remove(Zona);
			entityManager.getTransaction().commit();
		} catch (Exception e) {
			entityManager.getTransaction().rollback();
			e.printStackTrace();
			return false;
		}
		return true;
	}

	public static Long selectObjectByGeometry(JGeometryType geometry) {
		try {
			entityManager.getTransaction().begin();
			List<Zona> result = entityManager
					.createQuery("from Zona WHERE SDO_RELATE(geo_zony, :geo, 'mask=anyinteract') = 'TRUE')", Zona.class)
					.setParameter("geo", geometry).getResultList();
			entityManager.getTransaction().commit();
			return result.isEmpty() ? null : result.get(0).getIdZony();
		} catch (Exception e) {
			entityManager.getTransaction().rollback();
			e.printStackTrace();
		}
		return null;
	}

}
